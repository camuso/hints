
On Mon, May 15, 2023 at 10:09 AM Leigh Griffin <lgriffin@redhat.com> wrote:

    Adding 2 folks who might be able to help here :)

    Leigh

    On Mon, May 15, 2023 at 2:54 PM Leigh Griffin <lgriffin@redhat.com> wrote:

        I don't have the skills / context to answer this, I'm wondering were you looking for some of my old reports?

        Leigh

        On Mon, May 15, 2023 at 2:44 PM Tony Camuso <tcamuso@redhat.com> wrote:


            Good morning.

            I have a package that needs to be updated. This used to be
            a relatively simple process consisting of ...

            . Download the new package tar

            . Do a local build for sanity check using ...
               rhpkg local
               centpkg local

            . Make any necessary code changes
            . Test

            . Upload the new tar to the dist-git
               rhpkg upload
               centpkg upload

            . Remove the old SHA hash from the sources file.
            . Update the spec file
            . Commit the changes to git

            . Push the updated package
               rhpkg push
               centpkg push

            . Build the updated package
               rhpkg build
               centpkg build

            . Create and manage Errata

            This process does not work anymore, and I have no idea how to
            get this done.

First of all, the above behavior is still the proper course for changes going
$ git push <gitlabusername> <branchname>
into a Z-stream release. If they are instead going into the next Y-stream
release, then the process is actually much simplified (using bash and RHEL 9 as
an example):

# Clone the package from rhel into a rhel directory
#
$ rhpkg co <package> <rheldir>
  (or "git fetch origin" to get the latest state)

# rhel-8 example
# NOTE:
#  You must push the point release PREVIOUS to the point release you are
#  working on.
#  So, for rhel-8.10.0 ...
#
$ git checkout rhel-8-main
$ git push origin rhel-8-main:rhel-8.9.0
$ centpkg fork[1]
$ git checkout -b <branchname[2]>

# tboot example for fetching an upstream tar file
#
$ curl -L \
	https://sourceforge.net/projects/tboot/files/latest/download?source=files \
	-o tboot-1.11.2.tar.gz
$
$ centpkg upload <package.tar.gz>

# Make packaging changes, including updating the NVR and change log
# in the spec file.

# Test the build and make any required fixes
#
$ centpkg local

$ git commit -s .

# If all is good with the local build, testing the resulting rpm, then...
#
$ git push <gitlabusername> <branchname>

# This step should provide you with a URL to create a merge request into CentOS
# Stream[3]. That will trigger some CI checks as well. Once the MR is approved,
# you can merge it through the Gitlab WebUI.
#
# After the MR is merged (into the c8s or c9s branch), create or cd to a centos
# directory.
#
$ centpkg co <package> <centosdir>

# Make sure you have the commit from the merged MR.
#
$ git pull

# Now test build the package
#
rhpkg --release rhel-8.10.0 build --scratch --srpm # <- test build

# Now you must create or update a centos directory.
#
# The directory tree I'm using is ...

/work/tboot/devel/rhel

# ... for all the above steps.
# Now you must create or update a centos directory

$ cd ..
$ pwd
/work/tboot/devel

$ centpkg co tboot cpkg
   ... or ...
$ git fetch --all
$ cd cpkg

# Example for RHEL-8,10.0 ...
#
# These are the branches ...
$ git branch -r
  origin/HEAD -> origin/c9s
  origin/c10s
  origin/c8s
  origin/c9s

# Checkout the c8s branch
$ git checkout -b c8s origin/c8s

# Make sure your changes have propagated from the merge
$ gitnice -d
873df01  2023-11-03 Rebase to upstream 1.11.2 and bump nvr to 1.11.2-1

# Now do the formal build ...
#
rhpkg --release rhel-8.10.0 build




$ kinit
$ centpkg build

$ centpkg build

This last step will trigger both the CentOS Stream 9 and RHEL 9 builds.


[1] This may fail the first time if you don't have an API token set up. Run
`centpkg fork -h` for instructions on how to do so.

[2] Don't start the branch with `rhel-`. There's a known bug in Gitlab:
https://gitlab.com/gitlab-org/gitlab/-/issues/378945

[3] If you haven't logged into the `/redhat/centos` section of the Gitlab Web
UI recently, you may stumble across
https://gitlab.com/gitlab-org/gitlab/-/issues/391765 which results in being
provided the wrong URL to create the merge request. If that happens, you may
need to browse to the dist-git repo directly and create the MR manually.

