# yum install tpm-tools tpm-tools-devel


REBASE PROCESS
==============

0. install rhpkg repo:

   a. RHEL7:
      $ sudo curl -o /etc/yum.repos.d/rhpkg.repo \
	      http://download.eng.bos.redhat.com/rel-eng/dist-git/rhel/rhpkg.repo
      $ sudo yum install -y rhpkg trousers-devel

   b. Fedora:
      $ sudo curl -o /etc/yum.repos.d/rhpkg.repo \
	      http://download.devel.redhat.com/rel-eng/dist-git/fedora/rhpkg.repo

   c. EFI systems, in order to launch tboot
	$ sudo dnf install -y grub2-efi-x64-modules
	$ sudo mkdir -p /boot/efi/EFI/centos/x86_64-efi
	$ sudo cp /usr/lib/grub/x86_64-efi/relocator.mod \
		/boot/efi/EFI/centos/x86_64-efi/
	$ sudo cp /usr/lib/grub/x86_64-efi/multiboot2.mod \
		/boot/efi/EFI/centos/x86_64-efi/

1. Gets the current rhel package

   a. Download all branches.
      $ rhpkg clone -B tboot 	# downloads all branches
      $ ls tboot/		# subdirs will have branch names
      $ rm -rf tboot		# delete the whole smash

   b. Clone the specific branch

      $ rhpkg clone -b rhel-7.4 tboot rhel-7.4

      The above command line clones the rhel-7.4 branch of tboot into
      a subdirectory named rhel-7.4

2. Download latest tar from http://sourceforge.net/projects/tboot/files

   curl -L -o tboot-1.9.5.tar.gz \
      https://sourceforge.net/projects/tboot/files/latest/download?source=files

3. Edit the tboot.spec file to update the version number

   $ cd tboot
   $ vim tboot.spec

4. $rhpkg local

   Attempt a local build of the new package.

5. Resolve any errors from the attempted local build. For example, add
   new files or delete files that no longer exist from the tboot.spec
   file.  If there were any errors, Go back to step 4.

6. Upload the new tar file that you downloaded from the sourceforge
   website. This will update the sources and .gitignore files.

   $ rhpkg upload tboot-1.8.2.tar.gz

7. Edit the sources file to remove the reference to the old tar file.

8. git add and commit the changes.

   $ git add tboot.spec
   $ git commit

9. Run rhpkg local once more to be sure all is well, then

   $ rhpkg push

10. After the push, do a brew build.

  $ rhpkg scratch-build
  $ rhpkg build


PATCH PROCESS
=============

1. Download the latest tboot hg repo
   $ mkdir hg
   $ cd hg
   $ hg clone http://hg.code.sf.net/p/tboot/code/

2. Migrate the hg repo to git

   To use hg to create the patch, use the hg commit number.
   e.g ...

	$ hg log -l 1
	changeset:   637:5bf5c12411d3
	tag:         tip
	user:        Lukasz Hawrylko <lukasz.hawrylko@intel.com>
	date:        Wed Sep 15 16:53:34 2021 +0200
	summary:     Use sha256 as default hashing algorithm in lcp2_mlehash and tb_polgen

	$ hg export -r 5bf5c12411d3 > ../sha256.patch

   To use git to create the patch ...
   If you don't already have fast-export, go get it.

   In the directory of your choice ...
	$ mkdir ~/fast-export
	$ cd ~/fast-export
   	$ git clone git://repo.or.cz/fast-export.git

   Create the git repo
	$ mkdir git
	$ git init git
	$ cd git
	$ ~/fast-export/hg-fast-export.sh -r ../hg/code
	$ git checkout HEAD

3. Use git format-patch to extract the patches you need to apply and save them
   into a directory somewhere. Set the config no prefix and no numbered.

   $ git config format.numbered false
   $ git config format.subjectprefix ""
   $ git format-patch f62afe832 -o ../../backports

4. Get the package.

   $ rhpkg clone tboot

   This will create a directory tboot/

5. Get the package tar and source files.

   $ cd tboot
   $ rhpkg prep

   $ ls -alch
   drwxrwxr-x.  4 tcamuso tcamuso 4.0K Oct  6 10:17 ./
   drwxrwxr-x.  3 tcamuso tcamuso 4.0K Oct  6 10:11 ../
   drwxrwxr-x.  8 tcamuso tcamuso 4.0K Oct  6 10:13 .git/
   -rw-rw-r--.  1 tcamuso tcamuso  126 Oct  6 10:13 .gitignore
   -rw-rw-r--.  1 tcamuso tcamuso   53 Oct  6 10:13 sources
   drwxr-xr-x. 10 tcamuso tcamuso 4.0K Oct  6 10:14 tboot-1.7.4/
   -rw-rw-r--.  1 tcamuso tcamuso 464K Oct  6 10:14 tboot-1.7.4.tar.gz
   -rw-rw-r--.  1 tcamuso tcamuso 3.4K Oct  6 10:13 tboot.spec

6. Create a git repo out of the sources and apply the patches you extracted with
   git format-patch from the git repo exported from the hg repo.

   $ git init
   $ git add .
   $ git commit -a

   # Use git am in a loop, because the tag commits will fail as patches. Using
   # git am in a loop will allow the sequential patches to be applied, even
   # though the tag commit failed to apply.
   #
   $ patches=$(ls -1 ../../backports/*.patch)
   $ for patch in $patches; do git am backports/$patch; done

Some handy routines ...

for f in $(ls -1 *.patch); do t1=$(echo $f | cut -d'-' -f-3);t2=$(echo $f | cut -d'-' -f4-); mv $f $t1".el7"-$t2; done

for f in $(ls -1 *.patch); do fname=$(printf "tboot-1.8.3-2-%s" $f); mv $f $fname; done

for f in $(ls -1 *.patch); do t1=$(echo $f | cut -d'-' -f-3);t2=$(echo $f | cut -d'-' -f4-); mv $f $t1".el7"-$t2; done

for f in $(ls -1 *.patch); do fname=$(printf "tboot-1.8.3-2-%s" $f); mv $f $fname; done

ERRATA
======

errata.devel.redhat.com

brew latest-pkg rhel-7.3-candidate tboot

ANNOCHECK
=========
dnf install -y annobin
dnf install -y annobin-annocheck

Include the following in the spec file.
%build
%set_build_flags	# <----------
%make_build debug=y	# <----------

