From http://stackoverflow.com/questions/1526044/partly-cherry-picking-a-commit-with-git


The core thing you're going to want here is git add -p (-p is a synonym for
--patch). This provides an interactive way to check in content, letting you
decide whether each hunk should go in, and even letting you manually edit the
patch if necessary.

To use it in combination with cherry-pick:

git cherry-pick -n <commit> # get your patch, but don't commit (-n = --no-commit)
git reset                   # unstage the changes from the cherry-picked commit
git add -p                  # make all your choices (add the changes you do want)
git commit                  # make the commit!

(Thanks to Tim Henigan for reminding me that git-cherry-pick has a --no-commit
 option, and thanks to Felix Rabe for pointing out that you need to reset! If
 you only want to leave a few things out of the commit, you could use git reset
 <path>... to unstage just those files.)

You can of course provide specific paths to add -p if necessary. If you're
starting with a patch you could replace the cherry-pick with apply.

If you really want a git cherry-pick -p <commit> (that option does not exist),
your can use

	git checkout -p <commit>

That will propose you to apply each hunk of the commit individually. This
option may be more useful if the commit you're pulling in has merge conflicts
in part of the commit you're not interested in.


